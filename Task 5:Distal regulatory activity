# **Task 5:Distal regulatory activity**

***

## **Task 1: Create Directory Structure**

- Create a folder regulatory_elements inside epigenomics_uvic. This will be the folder where you store all your subsequent results.

```bash
mkdir -p ~/epigenomics_uvic/regulatory_elements/{analyses,data/{bigBed_files,bed_files},results}
cd ~/epigenomics_uvic/regulatory_elements || exit 1
```

## **Task 2: Identify Distal Regulatory Regions**

The relevant data can be extracted using the metadata.tsv file downloaded from the ENCODE project, which contains metadata for histone ChIP-seq data.

```bash
wget -O metadata.tsv "https://www.encodeproject.org/metadata/?type=Experiment&assay_title=Histone+ChIP-seq&biosample_ontology.term_name=sigmoid+colon&biosample_ontology.term_name=stomach&status=released&files.file_type=bigBed+narrowPeak"
```
To identify distal regulatory regions, the focus is on open regions that overlap with peaks of H3K27ac and H3K4me1 marks in the corresponding tissue. These histone marks are typically found at regulatory regions, such as enhancers. By filtering the open regions using these marks, a list of candidate distal regulatory elements will be obtained. After filtering the file based on the presence of both H3K27ac and H3K4me1 marks, a list of candidate regions will be generated.

```bash
grep "bigBed narrowPeak" metadata.tsv | grep "GRCh38" |
awk 'BEGIN{FS=OFS="\t"}{print $1,$11,$23}' | sort -k2,2 -k3,3 -u > analyses/bigBed_peaks_ids_H3K27ac_H3K4me1.txt
ls -lh metadata.tsv
head -n 10 metadata.tsv
```

### **Download and Convert bigBed Files**

The corresponding bigBed files for these regions will be downloaded, which contain the regulatory peaks:

```bash
mkdir -p data/bigBed_files
cut -f1 analyses/bigBed_peaks_ids_H3K27ac_H3K4me1.txt | while read file; do
    wget -P data/bigBed_files "https://www.encodeproject.org/files/$file/@@download/$file.bigBed"
done
```
```bash
mkdir -p data/bed_files
for file in data/bigBed_files/*.bigBed; do
    bigBedToBed "$file" data/bed_files/"$(basename "$file" .bigBed).bed"
done
```
```bash
mkdir -p results
ls -lh data/bigBed_files/ | head -n 10
ls -lh data/bed_files/ | head -n 10
```

### **Subtract Gene Coordinates and Identify Regulatory Elements**
```bash
for tissue in stomach sigmoid_colon; do
    bedtools subtract -a ~/ATAC-seq/analyses/peaks.analysis/peaks."$tissue".bed \
                      -b ~/ATAC-seq/annotation/gene_body_coordinates_filtered.bed \
                      > ~/ATAC-seq/analyses/peaks.analysis/peaks."$tissue".non_gene.bed
done
```
```bash
for tissue in stomach sigmoid_colon; do
    bedtools intersect -a ~/ATAC-seq/analyses/peaks.analysis/peaks."$tissue".non_gene.bed \
                       -b data/bed_files/ENCFF612PJZ.bed -u |
    bedtools intersect -a - -b data/bed_files/ENCFF465AFR.bed -u > results/"$tissue"_distal_regulatory_elements.bed
done
```

## **Task 3: Extract Chromosome 1 Regulatory Elements**

In this task, the focus is on regulatory elements located on chromosome 1. To extract the relevant regions, the previously identified regulatory elements (regulatory.elements.starts.tsv) will be filtered based on their chromosome location (chromosome 1). The regulatory region name and its start (5') coordinate will be extracted using awk, and the results will be stored in regulatory.elements.starts.tsv.

```bash
awk '$1 == "chr1" {print $4, $2}' results/stomach_distal_regulatory_elements.bed > results/stomach_regulatory.elements.starts.tsv
awk '$1 == "chr1" {print $4, $2}' results/sigmoid_colon_distal_regulatory_elements.bed > results/sigmoid_colon_regulatory.elements.starts.tsv
cat results/stomach_regulatory.elements.starts.tsv results/sigmoid_colon_regulatory.elements.starts.tsv > regulatory.elements.starts.tsv
head regulatory.elements.starts.tsv
```
This will generate a file containing the regulatory regions on chromosome 1 and their corresponding start coordinates.

## **Task 4: Focus on Protein-Coding Genes on Chromosome 1**

The next step is to identify protein-coding genes located on chromosome 1. From the gene body coordinates file, gene name and the start coordinate will be parsed. The strand orientation will be accounted for (if the gene is on the minus strand, the start is at the 3' end).

awk 'BEGIN{FS=OFS="\t"} $1 == "chr1" {if ($6=="+"){start=$2} else {start=$3}; print $4, start}' ~/ATAC-seq/annotation/gene_body_coordinates_filtered.bed > results/gene.starts.tsv
ls results/gene.starts.tsv
head results/gene.starts.tsv
```
This will generate a file gene.starts.tsv containing the names and start coordinates of the protein-coding genes located on chromosome 1.

## **Task 5: Distance Calculation Script**
A Python script (get.distance.py) will be used to calculate the distance between a regulatory element and the closest gene. This script takes two inputs: --input, which corresponds to the gene.starts.tsv file, and --start, which is the 5' coordinate of a regulatory element.

```bash
mkdir -p ~/epigenomics_uvic/bin
nano ~/epigenomics_uvic/bin/get.distance.py
```
```bash
#!/usr/bin/env python3

import sys
from optparse import OptionParser

# Parse command-line options
parser = OptionParser()
parser.add_option("-i", "--input", dest="input", help="Input file containing gene start positions")
parser.add_option("-s", "--start", dest="start", help="Start coordinate of the regulatory element")
options, args = parser.parse_args()

# Check if the necessary input file and start position are provided
if not options.input or not options.start:
    print("Error: Missing required arguments. Please provide both --input and --start.")
    sys.exit(1)

# Open the input file containing gene start positions
try:
    open_input = open(options.input)
except FileNotFoundError:
    print(f"Error: The file {options.input} was not found.")
    sys.exit(1)

# Convert the enhancer start position to integer
enhancer_start = int(options.start)

# Initialize variables
x = 1000000  # Set maximum distance to 1 Mb (1000000 base pairs)
selectedGene = ""
selectedGeneStart = 0

# Loop through each line in the input file and compute the distance to the enhancer
for line in open_input:
    gene, pos = line.strip().split('\t')  # Split the line into gene name and start position
    position = int(pos)  # Convert gene start position to integer
    distance = abs(position - enhancer_start)  # Calculate absolute distance

    # Update closest gene if this distance is smaller
    if distance < x:
        x = distance
        selectedGene = gene
        selectedGeneStart = position

# Print the closest gene, its start position, and the distance
print("\t".join([selectedGene, str(selectedGeneStart), str(x)]))
```

```bash
chmod +x ~/epigenomics_uvic/bin/get.distance.py
```
```bash
python ~/epigenomics_uvic/bin/get.distance.py --input results/gene.starts.tsv --start 980000
```
Running this command should return the closest gene along with its distance, as shown below:
_ENSG00000187642.9       982093  2093_

## **Task 6: Calculate Distances for All Regulatory Elements**
For each regulatory element in the regulatory.elements.starts.tsv file, the closest gene and the distance will be calculated using the script created in Task 5. This will be done by piping the regulatory.elements.starts.tsv file into the script for each region.

```bash
cat regulatory.elements.starts.tsv | while read element start; do
    python ~/epigenomics_uvic/bin/get.distance.py --input results/gene.starts.tsv --start "$start"
done > regulatoryElements.genes.distances.tsv
sort -u regulatoryElements.genes.distances.tsv > regulatoryElements.genes.distances.unique.tsv
```
```bash
head regulatoryElements.genes.distances.tsv
```
This will generate a file regulatoryElements.genes.distances.tsv containing the gene name, gene start, and distance for each regulatory element.

## **Task 7: Compute Mean and Median of Distances in R**
Finally, the mean and median of the distances from regulatoryElements.genes.distances.tsv will be computed in R. This will be done by reading the file into R and using the mean() and median() functions to calculate these statistics.
```R
# Read the file
data <- read.table("regulatoryElements.genes.distances.tsv", header = FALSE, sep = "\t")

# Rename columns
colnames(data) <- c("Gene", "GeneStart", "Distance")

# Compute statistics
mean_distance <- mean(data$Distance)
median_distance <- median(data$Distance)

# Print results
cat("Mean distance:", mean_distance, "\n")
cat("Median distance:", median_distance, "\n")
```
The resulting output shows the calculated mean and median distances:
* Mean distance: 22935.87
* Median distance: 867
---
## **Conclusion**
The results of this analysis provide valuable information on the relationship between distal regulatory elements and protein-coding genes, which is crucial for understanding gene regulation mechanisms in different tissues.




