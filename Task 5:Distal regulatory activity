# **Task 5:Distal regulatory activity**

## **Task 1: Create Directory Structure**
- Created the directory `epigenomics_uvic/regulatory_elements` to store subsequent results.

## **Task 2: Identify Distal Regulatory Regions**
- Downloaded metadata from ENCODE.
- Filtered for H3K27ac and H3K4me1 peaks in stomach and sigmoid colon tissues.
- Retrieved bigBed file IDs:
  ```
  ENCFF848EII  sigmoid colon   H3K27ac-human
  ENCFF612PJZ  stomach         H3K27ac-human
  ENCFF465AFR  stomach         H3K4me1-human
  ```
- Downloaded and converted bigBed files to BED format.
- Subtracted gene-body coordinates from ATAC-seq peaks.
- Intersected ATAC-seq peaks with histone mark peaks.

### **Results:**
  ```
  Stomach distal regulatory elements: 17838
  Sigmoid colon distal regulatory elements: 17439
  ```

## **Task 3: Extract Regulatory Elements on Chromosome 1**
- Extracted peaks on chromosome 1.
- Generated `regulatory.elements.starts.tsv` containing:
  ```
  Peak_148510  817333
  Peak_29458   817333
  Peak_67565   817333
  Peak_163653  826954
  ```

## **Task 4: Extract Gene Starts on Chromosome 1**
- Extracted protein-coding genes located on chromosome 1.
- Generated `gene.starts.tsv`:
  ```
  ENSG00000186092.4  69090
  ENSG00000279928.1  182392
  ENSG00000279457.3  200322
  ```

## **Task 5: Python Script for Closest Gene Distance Calculation**
- Created `get.distance.py` script to find the closest gene and its distance.
- Tested script:
  ```
  python ~/epigenomics_uvic/bin/get.distance.py --input results/gene.starts.tsv --start 980000
  ```
  **Output:**
  ```
 ENSG00000187642.9  982093  2093
  ```

## **Task 6: Compute Distances for All Regulatory Elements**
- Ran script for all elements in `regulatory.elements.starts.tsv`.
- Generated `regulatoryElements.genes.distances.tsv`:
  ```
  ENSG00000187634.10  924879  107546
  ENSG00000187583.10  966496  415
  ENSG00000188290.10  1000172 0
  ```

## **Task 7: Compute Mean and Median Distances Using R**
- Computed summary statistics in R:
  ```R
  data <- read.table("regulatoryElements.genes.distances.tsv", header = FALSE, sep = "\t")
  colnames(data) <- c("Gene", "GeneStart", "Distance")
  mean_distance <- mean(data$Distance)
  median_distance <- median(data$Distance)
  cat("Mean distance:", mean_distance, "\n")
  cat("Median distance:", median_distance, "\n")
  ```

### **Final Results:**
  ```
  Mean distance: 26975.05
  Median distance: 2781
  ```

---

## **Pipeline Execution**
### **1. Create Directories**
```bash
mkdir -p ~/epigenomics_uvic/regulatory_elements/{analyses,data/{bigBed_files,bed_files},results}
cd ~/epigenomics_uvic/regulatory_elements || exit 1
```

### **2. Download Metadata and Filter Peaks**
```bash
wget -O metadata.tsv "https://www.encodeproject.org/metadata/?type=Experiment&assay_title=Histone+ChIP-seq&biosample_ontology.term_name=sigmoid+colon&biosample_>grep -E "H3K27ac|H3K4me1" metadata.tsv | grep "bigBed narrowPeak" | grep "GRCh38" |
awk 'BEGIN{FS=OFS="\t"}{print $1,$11,$23}' | sort -k2,2 -k3,3 -u > analyses/bigBed_peaks_ids_H3K27ac_H3K4me1.txt
```

### **3. Download and Convert bigBed Files**
```bash
mkdir -p data/bigBed_files
download_ids=$(cut -f1 analyses/bigBed_peaks_ids_H3K27ac_H3K4me1.txt)
for file in $download_ids; do
    wget -P data/bigBed_files "https://www.encodeproject.org/files/$file/@@download/$file.bigBed"
    bigBedToBed data/bigBed_files/"$file".bigBed data/bed_files/"$file".bed
done
```
### **4. Subtract Gene Coordinates and Identify Regulatory Elements**
```bash
for tissue in stomach sigmoid_colon; do
    bedtools subtract -a ~/ATAC-seq/analyses/peaks.analysis/peaks."$tissue".bed \
                      -b ~/ATAC-seq/annotation/gene_body_coordinates_filtered.bed \
                      > ~/ATAC-seq/analyses/peaks.analysis/peaks."$tissue".non_gene.bed

done

for tissue in stomach sigmoid_colon; do
    bedtools intersect -a ~/ATAC-seq/analyses/peaks.analysis/peaks."$tissue".non_gene.bed \
                       -b data/bed_files/ENCFF848EII.bed data/bed_files/ENCFF612PJZ.bed -u |
    bedtools intersect -a - -b data/bed_files/ENCFF465AFR.bed -u > results/"$tissue"_distal_regulatory_elements.bed

done
```

### **5. Extract Chromosome 1 Regulatory Elements**
```bash
awk '$1 == "chr1" {print $4, $2}' results/stomach_distal_regulatory_elements.bed > results/stomach_regulatory.elements.starts.tsv
awk '$1 == "chr1" {print $4, $2}' results/sigmoid_colon_distal_regulatory_elements.bed > results/sigmoid_colon_regulatory.elements.starts.tsv
cat results/stomach_regulatory.elements.starts.tsv results/sigmoid_colon_regulatory.elements.starts.tsv > regulatory.elements.starts.tsv
```

### **6. Extract Gene Start Positions on Chromosome 1**
```bash
awk 'BEGIN{FS=OFS="\t"} $1 == "chr1" {if ($6=="+"){start=$2} else {start=$3}; print $4, start}' ~/ATAC-seq/annotation/gene_body_coordinates_filtered.bed > resul>```

### **7. Compute Distances with Python**
```bash
mkdir -p ~/epigenomics_uvic/bin
nano ~/epigenomics_uvic/bin/get.distance.py
```
```bash
#!/usr/bin/env python3

import sys
from optparse import OptionParser

# Parse command-line options
parser = OptionParser()
parser.add_option("-i", "--input", dest="input", help="Input file containing gene start positions")
parser.add_option("-s", "--start", dest="start", help="Start coordinate of the regulatory element")
options, args = parser.parse_args()

# Check if the necessary input file and start position are provided
if not options.input or not options.start:
    print("Error: Missing required arguments. Please provide both --input and --start.")
    sys.exit(1)

# Open the input file containing gene start positions
try:
    open_input = open(options.input)
except FileNotFoundError:
    print(f"Error: The file {options.input} was not found.")
    sys.exit(1)

# Convert the enhancer start position to integer
enhancer_start = int(options.start)

# Initialize variables
x = 1000000  # Set maximum distance to 1 Mb (1000000 base pairs)
selectedGene = ""
selectedGeneStart = 0

# Loop through each line in the input file and compute the distance to the enhancer
for line in open_input:
    gene, pos = line.strip().split('\t')  # Split the line into gene name and start position
    position = int(pos)  # Convert gene start position to integer
    distance = abs(position - enhancer_start)  # Calculate absolute distance

    # Update closest gene if this distance is smaller
    if distance < x:
        x = distance
        selectedGene = gene
        selectedGeneStart = position

# Print the closest gene, its start position, and the distance
print("\t".join([selectedGene, str(selectedGeneStart), str(x)]))
```

```bash
chmod +x ~/epigenomics_uvic/bin/get.distance.py
python ~/epigenomics_uvic/bin/get.distance.py --input results/gene.starts.tsv --start 980000
cat regulatory.elements.starts.tsv | while read element start; do
python ~>     python ~/epigenomics_uvic/bin/get.distance.py --input results/gene.starts.tsv --start "$start"
> done > regulatoryElements.genes.distances.tsv
head regulatoryElements.genes.distances.tsv
```

### **8. Compute Statistics in R**
```R
mean_distance <- mean(data$Distance)
median_distance <- median(data$Distance)
cat("Mean distance:", mean_distance, "\n")
cat("Median distance:", median_distance, "\n")
```

---

## **Conclusion**
This pipeline successfully identifies and analyzes distal regulatory elements, linking them to the closest genes and computing their distances. The results prov>





